<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[信息熵、交叉熵、条件熵、互信息]]></title>
    <url>%2F2019%2F05%2F27%2F%E4%BF%A1%E6%81%AF%E7%86%B5%E3%80%81%E4%BA%A4%E5%8F%89%E7%86%B5%E3%80%81%E6%9D%A1%E4%BB%B6%E7%86%B5%E3%80%81%E4%BA%92%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[设随机变量X，有n个事件$x_i$ –&gt; $x_n$，概率分布为p(x) 信息 某随机变量X取值为xi的信息为 $I(X=xi)=\log_2\frac{1}{p(x_i)}=-\log_2p(x_i)$：某事件xi的信息代表这个事件能提供的信息，一个发生概率越小的事件能够提供的信息量越大。 信息熵 信息代表一个事件的不确定性，信息熵是整个随机变量X不确定性的度量：信息的期望。$H(X)=\sum_0^np(x_i)*I(x_i)=-\sum_0^np(x_i)\log_2(p(x_i))$ 信息熵只与变量X的分布有关，与其取值无关。例如二分类中，两取值的概率均为0.5时，其熵最大，也最难预测某时刻哪一类别会发生。 如何通俗的解释交叉熵与相对熵? - CyberRep的回答 - 知乎https://www.zhihu.com/question/41252833/answer/195901726 对于一个系统而言，若获知其真实分布，则我们能够找到一个最优策略，以最小的代价来消除系统的不确定性，而这个最小的代价（猜题次数、编码长度等）就是信息熵。 条件熵 定义为：给定条件X下，Y的分布（Y|X）的熵对X的数学期望：$H(Y|X)=\sum_xp(x)H(Y|X=x)$ 在ML中，即选定某个特征X(X有n类)后，label(Y)的条件概率熵求期望：给定X特征的条件下Y的信息熵。 条件熵越小，代表在这个特征下，label的信息熵越小，也就是说要解决问题的代价越小。 信息增益 — ID3 $IG(Y|X)=H(Y)-H(Y|X)$ 在决策树中作为选择特征的指标，IG越大，这个特征的选择性越好，也可以理解为：待分类的集合的熵和选定某个特征的条件熵之差越大，这个特征对整个集合的影响越大。 对于条件熵来说，条件熵越小，分类后的纯度越高，但是问题是：X的取值越多，每个取值下Y的纯度越高，H(Y|X)越小，但此时并不有利于Y的区分。信息增益也是如此。–&gt; 信息增益率。 信息增益率/信息增益比 — C4.5 偏好取值少的特征。C4.5：先选择高于平均水平信息增益的特征，再在其中选择最高信息增益率的特征。 见Decision Tree 基尼系数 — CART 表示数据的不纯度。既有分类也有回归，既要确定特征，也要确定特征的分叉值。 见Decision Tree 交叉熵 前面提到：信息熵是最优策略下，消除系统不确定性的最小代价。这里的前提是：我们得到了系统的真实分布。 实际中，一般难以获知系统真实分布，所以要以假设分布去近似。交叉熵：用来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出的努力的大小。$CEH(p,q)=\sum_{k=1}^np_k\log_2\frac{1}{q_k}$，注意这里log中是q，是基于非真实分布q的信息量对真实分布的期望。 当假设分布$q_k$与真实分布$p_k$相同时，交叉熵最低，等于信息熵，所以得到的策略为最优策略。 在机器学习中的分类算法中，我们总是最小化交叉熵，因为交叉熵越低，就证明由算法所产生的策略最接近最优策略，也间接证明我们算法所算出的非真实分布越接近真实分布。 例如：在逻辑斯蒂回归或者神经网络中都有用到交叉熵作为评价指标，其中p即为真实分布的概率，而q为预测的分布，以此衡量两不同分布的相似性。 如何衡量不同策略的差异：相对熵 相对熵/K-L散度 用来衡量两个取值为正的函数或概率分布之间的差异。两者相同相对熵为0 使用非真实分布q的交叉熵，与使用真实分布p的的信息熵的差值：相对熵，又称K-L散度。 $KL(p,q)=CEH(p,q)-H(p)=\sum_{i=1}^np(x_i)\log\frac{p(x_i)}{q(x_i)}$ 联合熵 H(X,Y) 随机变量X,Y联合表示的信息熵 互信息 H（X；Y）俩变量交集，也记作I(X;Y) H（X；Y) = H(X,Y)-H(Y|X)-H(X|Y) I(X;Y)=KL(P(X,Y), P(X)P(Y)) 互信息越小，两变量独立性越强，P(X,Y)与P(X)P(Y)差异越小，P(X,Y)与P(X)P(Y)的相对熵越小 相对熵(p,q) = 信息熵(p) - 交叉熵(p,q) 信息增益(Y|X) = 信息熵(Y) - 条件熵(Y|X)]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTR_LR/Poly2/FM/FFM]]></title>
    <url>%2F2019%2F05%2F26%2FCTR%2F</url>
    <content type="text"><![CDATA[LR 问题：特征之间无相关性 Ploy2 暴力加入两两特征组合（权重*两特征点积） 问题：大部分特征是稀疏的，得到的特征值都是0，所以梯度更新时，因为大部分feature为0所以梯度并不会更新 FM(Factorization Machine、因子机)]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>CTR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tips in DS Competition]]></title>
    <url>%2F2019%2F04%2F11%2FTips%20in%20DS%20Competition%2F</url>
    <content type="text"><![CDATA[处理缺失数据 删除 imputation: mean mode … imputation + missing_flag … Categorial Columns 对于种类不是很多的：onehot encoder sklearn.preprocessing.OneHotEncoder: 如果使用线性模型，存在一个问题就是生成的n列是线性相关的，因此要满足线性无关就要删除其中一列。该类提供了drop_first参数 不用label encoder的原因：label encoder引入了大小顺序 XGBOOST]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>DataScience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVD&PCA]]></title>
    <url>%2F2019%2F04%2F06%2FSVD%26PCA%2F</url>
    <content type="text"><![CDATA[特征值分解(Eigen Value Decomposition)Ax = λx -&gt; A = WΣW^(-1) 其中Σ为对角阵，对角的值是A的特征值；W的列向量为对应的特征向量 对W标准化后，即Wi^(T).wi = 1 所以W^(T).W = I –&gt; W^(T) = W^(-1) W经标准化后为酉矩阵 -&gt; A = WΣW^(T) !!A必须是方阵 SVD(Singular Value Decomposition) 可以对非方阵分解 A = UΣV^(T), A: m x n, U: m x m, V: n x n, Σ: m x n; U和V都为酉矩阵，Σ主对角线上元素为奇异值 UVΣ的求解： U: AA^(T) = UΣ1U^(T) V: A^(T)A = VΣ2V^(T) Σ: A = UΣV^(T) =&gt; AV = UΣ =&gt; U^(T)AV = Σ =&gt; σi = Avi/ui 性质：可以用几个最大的奇异值及其左右奇异向量近似原矩阵 应用：降维，数据压缩，去噪声；也可用于NLP，如LSA… PCA基由线性不相关的向量组成，有时会取正交。 坐标变换&amp;矩阵相乘AB = C，B矩阵的每一个列向量变换到以A矩阵的行向量为基表示的空间中，最终得到的向量的维度（C的行数）取决于基的个数 –&gt; 可用于降、升维 降维 降维的目标：维数变低&amp;尽量保留更多的信息。 对于二维降到一维，要保留更多的信息，则原始向量在基向量上的投影应相隔距离尽量远 –&gt; 大方差 对于高维数据，如3维到2维，若只遵循大方差的原则，则两个基向量会相隔很近 –&gt; 信息不够分散 –&gt; 基向量之间的相关系数应尽量小 方差：单个随机变量之间的离散程度；协方差：多个随机变量之间的相似性 综上 –&gt; 协方差矩阵 协方差矩阵协方差矩阵对角线上是原矩阵的方差，其他位置的元素是原矩阵两两向量之间的协方差 –&gt; 协方差矩阵是实对称矩阵 –&gt; 可逆 原始问题即协方差矩阵的对角化 协方差矩阵对角化 原向量X，对应的协方差矩阵为C，P为基向量组成的变换矩阵；X经变换后为Y，Y=PX，Y的协方差矩阵为D，则：设X Y的期望为0，D = YY^(T) / m = PX X^(T)P^(T) / m = PCP^(T) PCA即寻找矩阵P使得 PCP^(T)是一个对角矩阵，且对角线上的值从大到小排列，取前k个值，以及对应P中的k个向量，即可将原n维矩阵降维至k维 –&gt; D对角线上的值即特征值，P为特征向量组成的矩阵 PCA 总结：寻找实现协方差矩阵对角化的矩阵P，并应用P对原有数据进行变换 算法步骤设有m条n维数据： 将原始数据按列组成n行m列矩阵X 将X的每一行（代表一个属性字段）进行零均值化，即减去这一行的均值 求出协方差矩阵C = XX^(T) / m 求出协方差矩阵的特征值及对应的特征向量 将特征向量按对应特征值大小从上到下按行排列成矩阵，取前k行组成矩阵P Y=PX即为降维到k维后的数据 优点：降低数据特征维度，减少数据存储量；加快运行速度 注意事项：量纲敏感性，最好进行量纲统一化；适用于大样本，小样本的话建议因子分析法]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Topic Model__TF-IDF/LSA/pLSA/NMF]]></title>
    <url>%2F2019%2F04%2F05%2FTopic%20Model__TF-IDF_LSA_pLSA_NMF%2F</url>
    <content type="text"><![CDATA[Topic Model主题模型即在大量文档中发现潜在主题的统计模型 主题模型是一种生成式有向图模型，即文档以一定概率选择主题，而主题是单词的概率分布。 文档 –&gt; 主题 –&gt; 单词 TF-IDF TF: term frequency —— (# occurrences of term t in document) / (# of words in documents) IDF: inverse document frequency —— log(# of documents / # documents with term t in it) TF * IDF 一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。一个词term的重要性与其在整个文件中出现的频率成正比；与它在语料库中的频率成反比。 可以用来提取关键词 有不足：比如某次在每个文件中都出现，这个词可能是is are之类的无用词，也可能是可以代表该文件库的关键词—-&gt;结合停用词处理？；没有考虑语义关联 LSA/LSI(Latent Semantic Analysis/Indexing)潜在语义分析/检索 假设有m个输入文档，每个文档有n个词项，则可以组成一个term-document的稀疏矩阵A∈Rm*n，它的行对应词项、列对应文档；Aij对应第i个文档的第j个词项，可以通过TF-IDF、词项在文档中出现的次数等方式确定矩阵每个元素的权重作为计算输入。经过SVD分解后将奇异值从大到小排列，取前k个最大的奇异值作为对原矩阵A的近似表示，Σ中的每个奇异值代表了潜在语义的重要度。 通过一次SVD分解就可以得到主题模型，同时解决语义的问题，但是计算得到的矩阵U、V中经常存在负数；可以通过计算词项（U的行）、文档（V的行or VT的列）之间的余弦相似度得到词项与词项、文档与文档之间的相似度；还可以对U、V中的词项和文档直接进行聚类，提取语义级别的近义词集合，便于搜索且减少数据存储量。 LSA适用于较小规模数据，可用于文档分类/聚类、同义词/多义词检索、跨语言搜索；SVD的计算很耗时，且潜在语义的数量k的选择对结果的影响非常大；LSA的原理简单但得到的不是概率模型，缺乏统计基础，矩阵中的负值难以解释，无法对应成现实中的概念。 pLSA(Potential Latent Semantic Analysis/Indexing)引入了隐含变量，并使用了EM算法求解 NMF(Non-negative Matrix Factorization) V ≈ WH，其中V∈Rnm为文档-单词矩阵，W∈Rnr体现文档和主题的概率相关度，H∈Rr*m体现单词和主题的概率相关度。 目的：V与WH的误差最小化，度量方式可选择欧几里得距离、KL散度… NMF的目标函数中共包含了nr+rm个参数，可以使用梯度下降法、拟牛顿法、坐标轴下降法等进行求解。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RNN & LSTM & GRU]]></title>
    <url>%2F2019%2F04%2F04%2FLSTM%2F</url>
    <content type="text"><![CDATA[RNN 动机：RNN之前，语言模型主要是N-gram，N可以变动，其作用是某位置的词取决于前N个词，所以该方法对任意序列的文本处理存在问题。 RNN：理论上可以看到往前看/往后看任意的长度。 最简单的RNN，即t时刻隐藏层的值既取决于t时刻的输入，也取决于t-1时刻的隐藏层的值。 双向循环网络，应用了下文的信息；深度循环网络，使用了多层隐藏层，更复杂了。 一个教程：RNN LSTM(Long Short Term) 动机：由RNN的机理可知，如果每层向下一个时刻传输的权重w大于1，则容易产生梯度爆炸问题，小于1，则会产生梯度消失一个对比图RNN只有一个传递状态ht，而LSTM有两个传递状态：cell state, hidden state。其中cell state是上一序列的隐藏层输出加上一些东西（有点类似于RNN中的ht）；而ht变化会比较大。 过程： 计算四个状态：z是输入，用了tanh，取值范围为-1，相当于归一化；zi&amp;zo&amp;zf为门控，用了sigmoid，输出为0~1，与某值相乘后是对该值的选择，其中i是information，f是forget，o是output； 四个状态在LSTM中的应用： 忘记：zf点乘ct，即通过zf忘记不重要的 选择记忆：对于输入信息z，点乘zi，进行有选择的记忆 输出：对上一阶段的c通过tanh进行放缩，再通过zo控制输出 GRU(Gate Recurrent Unit) 同样为了解决梯度问题 比LSTM：运算量小 使用了同一个门控状态控制记忆和忘记 具体：原文]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FP Tree算法]]></title>
    <url>%2F2019%2F03%2F19%2FFP%20Tree%2F</url>
    <content type="text"><![CDATA[blog FP Tree是Aprior算法的优化 优化点在于：Aprior需要多次扫描数据以查询频繁项，FP Tree使用了树结构，提高了算法运行效率。 FP Tree数据结构 项头表。格式为： | 项 | 该项出现的次数（降序排列） FP Tree。将原始数据集映射为一个FP Tree。 节点链表。所有项头表里的1项频繁集都是一个节点链表的头，它依次指向FP树中该1项频繁集出现的位置。这样做主要是方便项头表和FP Tree之间的联系查找和更新，也好理解。 项头表建立 第一次扫描数据：得到频繁一项集的计数，删除支持度小于阈值的项，并将剩余频繁集放入项头表，降序排列。 第二次扫描数据：从原始数据中删除非频繁项集，并对每一条数据按支持度降序排列其中的非频繁项集。 e.g. FP Tree建立 以null为根节点 按照项头表的顺序，从第一条数据开始插入频繁项集，每条数据中排序靠前的为祖先节点，反之为子孙节点，每个节点均置1 接下来进行下一条数据的插入。当已存在频繁项时，在原有数字上加一即可（注意在插入时，是每一层每一层插入，不能跳过某层直接在已有节点上加一） … 节点链表 节点链表即项头表中每个频繁项集都有一个指针指向FP Tree的相应节点。 FP Tree挖掘 得到了FP树和项头表以及节点链表，我们首先要从项头表的底部项依次向上挖掘。对于项头表对应于FP树的每一项，我们要找到它的条件模式基。所谓条件模式基是以我们要挖掘的节点作为叶子节点所对应的FP子树。得到这个FP子树，我们将子树中每个节点的的计数设置为叶子节点的计数，并删除计数低于支持度的节点。从这个条件模式基，我们就可以递归挖掘得到频繁项集了。 先从最底下的F节点开始，我们先来寻找F节点的条件模式基，由于F在FP树中只有一个节点，因此候选就只有下图左所示的一条路径，对应{A:8,C:8,E:6,B:2, F:2}。我们接着将所有的祖先节点计数设置为叶子节点的计数，即FP子树变成{A:2,C:2,E:2,B:2, F:2}。一般我们的条件模式基可以不写叶子节点，因此最终的F的条件模式基如下图右所示。 通过它，我们很容易得到F的频繁2项集为{A:2,F:2}, {C:2,F:2}, {E:2,F:2}, {B:2,F:2}。递归合并二项集，得到频繁三项集为{A:2,C:2,F:2}，{A:2,E:2,F:2},…还有一些频繁三项集，就不写了。当然一直递归下去，最大的频繁项集为频繁5项集，为{A:2,C:2,E:2,B:2,F:2} F挖掘完了，我们开始挖掘D节点。D节点比F节点复杂一些，因为它有两个叶子节点，因此首先得到的FP子树如下图左。我们接着将所有的祖先节点计数设置为叶子节点的计数，即变成{A:2, C:2,E:1 G:1,D:1, D:1}此时E节点和G节点由于在条件模式基里面的支持度低于阈值，被我们删除，最终在去除低支持度节点并不包括叶子节点后D的条件模式基为{A:2, C:2}。通过它，我们很容易得到D的频繁2项集为{A:2,D:2}, {C:2,D:2}。递归合并二项集，得到频繁三项集为{A:2,C:2,D:2}。D对应的最大的频繁项集为频繁3项集。 算法具体步骤 扫描数据，得到所有频繁一项集的的计数。然后删除支持度低于阈值的项，将1项频繁集放入项头表，并按照支持度降序排列。 扫描数据，将读到的原始数据剔除非频繁1项集，并按照支持度降序排列。 读入排序后的数据集，插入FP树，插入时按照排序后的顺序，插入FP树中，排序靠前的节点是祖先节点，而靠后的是子孙节点。如果有共用的祖先，则对应的公用祖先节点计数加1。插入后，如果有新节点出现，则项头表对应的节点会通过节点链表链接上新节点。直到所有的数据都插入到FP树后，FP树的建立完成。 从项头表的底部项依次向上找到项头表项对应的条件模式基。从条件模式基递归挖掘得到项头表项项的频繁项集。 如果不限制频繁项集的项数，则返回步骤4所有的频繁项集，否则只返回满足项数要求的频繁项集。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apriori 关联规则挖掘]]></title>
    <url>%2F2019%2F03%2F18%2FApriori%20%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E6%8C%96%E6%8E%98%2F</url>
    <content type="text"><![CDATA[问题引入 经常被同时购买的商品可以摆近一点，刺激购买欲望 通过附属产品优惠的方式，刺激主产品的销售 总体思想 逐层搜索迭代，通过K-1项集迭代出K项集。Aprior是用于压缩搜索空间。 概念 支持度：关联规则A-&gt;B的支持度support=P(AB)，同时发生的概率 置信度：confidence=P(A|B) k项集：事件A中包含k个元素，成为k项集；若事件A满足最小支持度阈值，称其为频繁k项集 由频繁项集产生强关联规则 K维数据项集LK是频繁项集的必要条件是它所有K-1维子项集也为频繁项集，记为LK-1 如果K维数据项集LK的任意一个K-1维子集Lk-1，不是频繁项集，则K维数据项集LK本身也不是最大数据项集。 Lk是K维频繁项集，如果所有K-1维频繁项集合Lk-1中包含LK的K-1维子项集的个数小于K，则Lk不可能是K维最大频繁数据项集。 同时满足最小支持度阀值和最小置信度阀值的规则称为强规则。 e.g.顾客购买记录的数据库D，包含6个事务。项集I={网球拍,网球,运动鞋,羽毛球}。考虑关联规则：网球拍网球，事务1,2,3,4,6包含网球拍，事务1,2,6同时包含网球拍和网球，支持度，置信度。若给定最小支持度，最小置信度，关联规则网球拍网球是有趣的，认为购买网球拍和购买网球之间存在强关联。 算法步骤 Apriori算法过程分为两个步骤： 第一步通过迭代，检索出事务数据库中的所有频繁项集，即支持度不低于用户设定的阈值的项集； 第二步利用频繁项集构造出满足用户最小信任度的规则。 具体做法就是： 首先找出频繁1-项集，记为L1；然后利用L1来产生候选项集C2，对C2中的项进行判定挖掘出L2，即频繁2-项集；不断如此循环下去直到无法发现更多的频繁k-项集为止。每挖掘一层Lk就需要扫描整个数据库一遍。算法利用了一个性质： Apriori 性质：任一频繁项集的所有非空子集也必须是频繁的。意思就是说，生成一个k-itemset的候选项时，如果这个候选项有子集不在(k-1)-itemset(已经确定是frequent的)中时，那么这个候选项就不用拿去和支持度判断了，直接删除。具体而言： 连接步:为找出Lk（所有的频繁k项集的集合），通过将Lk-1（所有的频繁k-1项集的集合）与自身连接产生候选k项集的集合。候选集合记作Ck。设l1和l2是Lk-1中的成员。记li[j]表示li中的第j项。假设Apriori算法对事务或项集中的项按字典次序排序，即对于（k-1）项集li，li[1]&lt;li[2]&lt;……….&lt;li[k-1]。将Lk-1与自身连接，如果(l1[1]=l2[1])&amp;&amp;( l1[2]=l2[2])&amp;&amp;……..&amp;&amp; (l1[k-2]=l2[k-2])&amp;&amp;(l1[k-1]&lt;l2[k-1])，(这里的作用是为了保证不产生重复的k项集)，那认为l1和l2是可连接。连接l1和l2 产生的结果是{l1[1],l1[2],……,l1[k-1],l2[k-1]}。 剪枝步:CK是LK的超集，也就是说，CK的成员可能是也可能不是频繁的。通过扫描所有的事务（交易），确定CK中每个候选的计数，判断是否小于最小支持度计数，如果不是，则认为该候选是频繁的。为了压缩Ck,可以利用Apriori性质：任一频繁项集的所有非空子集也必须是频繁的，反之，如果某个候选的非空子集不是频繁的，那么该候选肯定不是频繁的，从而可以将其从CK中删除。 e.g. 例子]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KNN]]></title>
    <url>%2F2019%2F03%2F14%2Fknn%2F</url>
    <content type="text"><![CDATA[算法步骤 给定已经分好类的训练集 对给定的测试数据，计算其与训练集中每一个样本的距离 取距离最小的前K个，按多数表决的方法决定属于哪一类 注意事项 数据要fair 可以通过对距离近的样本点加更大的权重优化 计算量较大]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#6]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%236%2F</url>
    <content type="text"><![CDATA[科技与社会（一） 经典科学 -&gt; 现代科学 学者型科学 -&gt; 产业型科学经典科学：作为纯粹理性的科学，非职业化的科学，追求一般规律的科学，简单和谐的科学。经典科学，经典科学家，与哲学、艺术靠近，应用是附带的次要的，成就及其大小主要由政治经济系统评价。 产业科学或科学的产业化：例如19世纪的重工业 科学的质变： 科学目标：纯粹理性 -&gt; 产品性能（垄断手段）和劳动生产率 科学主体：个体 -&gt; 集体 科学家：自由学者 -&gt; 雇员 科学资源：数学、哲学 -&gt; 市场 科学知识：简谐 -&gt; 爆炸]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#5]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%235%2F</url>
    <content type="text"><![CDATA[当代西方科学论科学的地位、作用和权力剧增，科学的合理性被关注 英，波普尔，证伪主义 美，库恩，历史主义 科学划界和科学动力学 “可证实性”与“可证伪性”波普尔对“可证实性”的反思： 有无意义不取决于属于本身，而取决于理论（语境）； 只有单称陈述可证实，而科学理论是全称陈述； 单称陈述也未必可证实，观察中渗透着理论； “可证实性”使科学划界混乱。 可证伪性：任何科学命题在逻辑上都可以被经验证明为假。 什么命题是无法被证明为假的 可证伪度：普遍性、精确性、简单性。这正好是科学理论命题的性质。 可证伪：证伪主义的科学划界标准。 证伪主义的科学动力学对归纳逻辑的反思：归纳法几乎总是受预设的干扰；归纳法非常有可能把重要的因素排除在外；归纳法有可能建立假的因果关系。总之，归纳法不是科学合理性的基础。 科学始于问题 P1 -&gt; TT -&gt; EE -&gt; P2 P: Problem TT: Tentative Theory EE: Elimation of Error 库恩对证伪主义的批判：科学史表明，自然现象喊“不”，科学家喊得更响。 观察渗透理论的问题。 证伪主义的启发：“正确”和有效。 至此，真理问题换为合理性问题，再换为有效性问题。 范式和科学共同体库恩的历史主义科学哲学试图回答：一致性来自何处？科学是如何进步的？ 范式：信念、信仰、习惯、原则、原理… 科学共同体：掌握、遵守和使用范式的群体。职业的、紧密的、有话语权的专家。 历史主义的科学动力学前科学 无范式 -&gt; 常规科学 范式 -&gt; 反思 -&gt; 危机 -&gt; 科学革命新的范式 库恩列举几大科学革命：哥白尼日心说、氧化理论、相对论和量子力学]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#4]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%234%2F</url>
    <content type="text"><![CDATA[历史观点科学：本质。应用于自然事物。技术：应用。人造事物。 现代哲学的观点海德格尔 物Physita：作为自身存在并持续存在的东西 物mathemata：可学的，可描述的，可传授的东西。 Mathemata是使事物成为对象的测量方案，即技术，所以海德格尔不谈科学。 比较： 阳明格竹 赫尔蒙特的柳树生长实验 科学的真正进步取决于技术化程度科学的历史使用测量技术取代形而上学的过程 用几何量取代本性 即，测量技术使物成为可知可控可用的对象 可知可控可用是一回事。重视前者表现为科学，重视后者表现为技术。 所以科学和技术是同一回事：用测量方案和数学模型将对象描述为可控的。两者本无区别，区别在有人想利用这体现哲学目的（宇宙图景）还是经济目的（生产力）。 认为科学和技术有本质区别的习惯从何而来西方，古希腊文化，中世纪神学，近代科学 开普勒追求的元物理学 metaphysics 古代和中世纪：经验几何学实用技术 近代两百年的欧洲：元物理学，劳动生产率 19世纪以后：现代科技一体化 结论： 古代和中世纪，无科学和技术之分。在人类漫长历史中的一小段时间，西方一些地区，即在以牛顿力学为代表的经典科学体系出现之后，在欧洲的几个国家，学者们开始重视演绎性的理论和积累性的技术之间的某种分离状况，并一度将前者的地位放在后者之前。 近代欧洲的文化目标——宇宙的先在秩序。即上帝将数学放进了宇宙，无论人类是否研究宇宙都是简单和谐的。研究只是使人类理智知道这个和谐。这导致对所谓基础理论，纯科学的偏爱。强调科学和技术的区别，只是把近代欧洲的科学理念当成了一般的东西。科学不是超越于具体文化差异的。 欧洲也并不迷信“纯科学”。 现代科技观近代欧洲的理想追求虽然与工业的目标并不矛盾，但是在西方社会的步伐进入工业化之后，仅仅因为那样的理想不被急需，纯科学的意义模糊了。二战期间，科学服务于军事使得科学与技术的区别无关紧要。战争这种重大的社会事件无需借助哲学说明就轻易地改变了近代欧洲的科学理念。科学和技术咋新的用途中成为了同一个东西，这是因为他们本来就是同一种东西。 旧科技观的弊病强调科学和技术的区别只是获得定义上的齐整，但不是一种有效的科学观。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#3]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%233%2F</url>
    <content type="text"><![CDATA[科学观——科学是一种公共知识 从另一个角度看近代科学为什么发生在欧洲近代欧洲的社会变革和知识观 古代和中世纪：知识就是权力（权力就是知识） 资产阶级革命 新兴资产阶级和自由知识分子 知识就是力量 首先是对知识一词的含义的重建 离开了经院哲学，知识的起点可以有：经验主义，实验主义，数学精神，科学理性 阿格里科拉和伽利略的共同点：效率，公共性，实证 知识世俗化、知识公共化是大工业、垄断资本和现代金融、现代市场、现代城市需要科学并成就的 影响世界历史进程的书 1532 马基雅维利 君主论文艺复兴后的第一个里程碑政治是一种独立的活动，自身具有区别于道德与宗教的原则和规律。批判 “手段（政治）为目的（为政以德）服务”。权术学。伟大的骗子教程，君主需兼具狮子的凶残和狐狸的狡诈。目的为手段服务，可以不择手段。全套术治理论。 开启了一种新的学术规则——方法有限而非观点优先；以效率为合理性（说服力）的核心；若无这样的规则，任何观点都无法被证明为对的或错的；这与稍后的科学革命不谋而合，且科学革命发扬得更彻底 1543 哥白尼 天体运行论 1628 哈维 心血运动论 1687 牛顿 自然哲学的数学原理 1689 洛克 政府论上篇批判君权神授和世袭制 无个性的基本单元：个人主义者的自然权利（生命、健康、自由、财产），人人平等，互相不得侵犯。 自然状态：人应当自由实践其自我利益，人人具有自然法执行权。但按照牛顿力学，此为布朗运动，需如日星辰城之有序。故人们为了避免冲突，维护公正，需要形成政治共同体，建立斌遵循政治秩序，但需给予政治秩序以理性解释。 1762 卢梭 社会契约论自然状态，自然人（粒子）公民形成文明社会，以众人之力，保护每个个体。为何需要保护？反原罪说。 1832 克劳塞维兹 战争论改革贵族文化中的旧军事体制 1859 达尔文 物种起源进攻目的论，神创论的最后堡垒]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#2]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%232%2F</url>
    <content type="text"><![CDATA[现代自然观 现代自然观的来源 起源于古希腊，兴于近代欧洲，完成于牛顿。 粒子论 机械论 还原论 时空观：时间、空间相互独立；空间均匀、平直、三维、各向同性；时间均匀、平直、一维、不可逆；时间、空间与物质各自独立。 物质观：物质只具有几何属性（形状、大小、位置）和机械属性（质量、弹性）。 从古希腊哲学到现代自然观古希腊知识分子的民间性：（非官方，正式由于其哲学本身上的纯粹性，才获得了很大的进步） 世界是物质的（麦乐斯“水是万物的本源”） 物质是质料的（原子论者，亚里士多德etc） 质料是形式的（毕达哥拉斯学派，希罗多德历史） 形式是几何的（欧几里得，阿基米德，天球） 运动是机械的（哥白尼，开普勒，伽利略，牛顿）中世纪奔溃，资产阶级重新选择文化的时候，选择了古希腊。 科学进步与自然观的更新 牛顿力学自然观本身就是一次科学大进步的产物 现代科学对机械论自然观的几次有限突破，都伴随着科学的重大突破 相对论自然观 量子力学自然观 复杂系统自然观 但语境还是机械论，自然观的反思和革命还将继续。 人与自然关系的反思 悲观主义 乐观主义 现实主义 三个流派的共同出发点： 人与自然的关系恶化 恶化的本质：现代人类对自然界的影响超过了自然界对人类活动的承载力。 悲观主义代表：罗马俱乐部 乐观主义《今后二百年——美国和世界的一幅远景》 在过去到未来的前后各二百年中，人类将从困境中摆脱出来，自然因素并不构成限制，科学技术的发展将会是自然环境和社会环境充满活力。 自然资源供应无限，人类的资源短缺等问题可以通过技术进步来解决。 当穷国富起来时，人口增长就会自动停止。 各有缺点： 悲观论者：线性外推，但忽略现有的社会生产方式、社会制度、社会意识形态都是可以改变的。 乐观论者：以自然资源潜力无限和科学技术能力无限为前提，但忽略了自然资源在理论上的潜在存在和… 现实主义《纵观世界全局》（美国世界观察研究所） 世界明天的好坏不是命运决定的，也不是科学技术的本性决定的，它取决于人类今后20年左右做出的决策是否明智。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然辩证法#1]]></title>
    <url>%2F2019%2F03%2F14%2F%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%231%2F</url>
    <content type="text"><![CDATA[次数不定随堂测验 | 80 平时成绩(课堂汇报) | 20 西方哲学认识论 内省型文化主客体关系 主体凸现和客体廓清主体凸现：反思，内省客体廓清：形式，语言，理论（模型、线索、规范、logos）语言和语言产品成为主客体中介从古希腊到近代欧洲，逻辑学、几何学、力学成为主客体中介 经典科学与哲学哲学是关于反思的人如何获知真理：经验论与唯理论经验论：洛克、休谟、贝克莱孔洞生成定律唯理论：笛卡尔、莱布尼兹、斯宾诺莎抽象思维，形式化概念体系恐惧：对恶的期待 （空）现代科学哲学当代科学技术哲学与自然辩证法《反杜林论》和《自然辩证法手稿》]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国古代典籍文化#1]]></title>
    <url>%2F2019%2F03%2F14%2F%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E5%85%B8%E7%B1%8D%E6%96%87%E5%8C%96%231%2F</url>
    <content type="text"><![CDATA[考核：第四五周布置论文题目，第八周交论文 古代典籍的载体和装帧甲骨 龟甲和兽骨的合称 甲：龟甲的腹板 骨：牛的肩胛骨和胫骨，也有猪羊的肩胛骨 金 铜，指青铜器（铜和锡的合金，呈青灰色）上的铭文。 金文铸刻的器具以钟鼎居多，又称钟鼎文 西周是钟鼎文最盛行的时代 石木牍]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>中国古代典籍文化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ROC AUC, Accuracy, Recall, F1]]></title>
    <url>%2F2019%2F03%2F14%2FROC%20%20AUC%2F</url>
    <content type="text"><![CDATA[类不平衡（class imbalance）现象：即负样本比正样本多很多（或者相反） ACCURACY/RECALL/F1 Accuracy：TP/(TP+TN) 即预测对的数据个数与总数据个数的比 A和R的问题在于如果样本不平衡，则参考意义很小 准确率（Precision）：P=TP/(TP+FP)。通俗地讲，就是预测正确的正例数据占预测为正例数据的比例。 针对判别结果 查准率 召回率（Recall）：R=TP/(TP+FN)。通俗地讲，就是预测为正例的数据占实际为正例数据的比例。 针对样本 查全率 F1 = 2*P*R/(P+R)：既有P又有R PRC， precision recall curve，与下面的ROC一样，先看是否光滑，光滑的话说明过拟合不大。越往右上越好。 A和R的问题在于如果样本不平衡，则参考意义很小 ROC AUC（receiver operating characteristic curve） TPR=TP/(TP+FN)=TP/actual positives 也就是RecallFPR=FP/(FP+TN)=FP/actual negativesROC是由点（TPR,FPR）组成的曲线，AUC就是ROC的面积。AUC越大越好。 画法：ROC曲线其实是多个混淆矩阵的结果组合，如果在上述模型中我们没有定好阈值，而是将模型预测结果从高到低排序，将每个概率值依次作为阈值，那么就有多个混淆矩阵。对于每个混淆矩阵，我们计算两个指标TPR（True positive rate）和FPR（False positive rate），TPR=TP/(TP+FN)=Recall，TPR就是召回率。FPR=FP/(FP+TN)，FPR即为实际为好人的人中，预测为坏人的人占比。我们以FPR为x轴，TPR为y轴画图，就得到了ROC曲线。 也就是说，ROC曲线的阈值不是多次运行模型得到的，是同一个模型中通过对所得结果按照概率的排序得到了一个threshold 原理： 在画图描点过程中，每取一个样本，会以此样本被预测为1的概率作为阈值，概率排序在此之上的样本认为是1，之下的样本会被认为是0（解释了ROC为何与样本预测值的排序有关）。 AUC的值代表了：取真实label为1和为0的两个样本，其中真样本被预测为1的概率大于假样本被预测为1的概率这一事件的概率。假设有M个真样本，N个假样本，M个真样本的预测概率升序排序，其值从大到小分别为rank_1…rank_m,例如6个真4个假，假设真样本概率最高的排序为10，则比它低的假样本有10-6=4个，下一个排序为8，则比它低的假样本有8-(6-1)=3个，此概率为：（rank_1 - m + rank_2 - (m-1) + rank_m - 1）/ M*N AUC=0.5时，任意一个样本被判断为真和判断为假的概率相等 e.g 当threshold取为0.5时：!ex0此时AUC=1：!ex00AUC=0.7:!!AUC=0.5:!!AUC=0:!! 一般来说，如果ROC是光滑的，那么基本可以判断没有太大的overfitting。 越往左上越好。 所以使用ROC的话，它会先对预测到的结果进行排序，然后再根据排序的结果画图，所以他的曲线形状不会因为数据不平衡而发生大的改变。 但是当数据极度不平衡时，ROC仍然有问题，下面的PRC表现更好。 参考1参考2 PRC， precision recall curve，与上面的ROC一样，先看是否光滑，光滑的话说明过拟合不大。越往右上越好。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>Metrics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WNSP#2]]></title>
    <url>%2F2019%2F03%2F14%2FWNSP%232%2F</url>
    <content type="text"><![CDATA[50GHz 丰富的频谱资源，即频带宽 速度快 波长短，更适合短距传输。穿透性差。 高度方向性 安全性 Li-Fi(Light Fidelity) 安全性和低穿透性：灯光具有可遮挡性 频谱资源丰富 无电磁辐射和电磁干扰 LP-WAN NB-IoT 数据安全及隐私：公网传输导致数据泄露 通信安全：通信网络面临攻击 设备安全 密码学 唯密文、唯明文、选择性密文、选择性明文 保密性 完整性 可用性 真实性 可追溯性 不可抵赖性 匿名性]]></content>
      <categories>
        <category>Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python面向对象]]></title>
    <url>%2F2019%2F03%2F14%2Fpython%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[属性命名 属性以双下划线开头，类内变量，实例无法访问。但可以通过某些方式访问，例如Student例中定义了__name变量，可以用_Student_name来实现访问，但不建议，因为不同的解释器的转化方式不一样。 单下划线可以打开，但需要注意不能随意更改。 双下划线结尾与开头，特殊变量，类内可以访问，实例不知。 多态开闭原则：定义一个类Animal及其多个之类Dog/Cat/…，当定义一个函数或操作时： 对扩展开放：允许新增Animal的子类； 对修改封闭：不需要修改依赖Animal类型的run_twice()等函数，仍然可以传入Dog/Cat等类。事实上，不需要继承也可以实现多态————鸭子类型。 若干方法 isinstance(object,class) 判断是否属于某个类 dir() 列举出一个对象的属性和方法 getattr()、setattr()、hasattr()可以获得、添加、查询是否需要某个属性 __slots__ 限制可以添加的属性，__slots__ = (‘name’, ‘age’) # 用tuple定义允许绑定的属性名称 装饰器]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Presentation of WNSP and IS]]></title>
    <url>%2F2019%2F03%2F14%2FPresentation%20of%20WNSP%20and%20IS%2F</url>
    <content type="text"><![CDATA[动机 Behavioral biomertics is the study of individual patterns(hand-writing, typing, mouse movements). 最早：二战中的电报员keying pattern password hardening(secondary authentication)、password-less logins Banks use typing information as an additional layer of security. Google is developing methods to authenticate users on mobile devices without passwords. human chosen passwords are far from safe -&gt; additional authentication -&gt; explicit methods are usually disruptive to the user -&gt; use behavioral biometrics goal: design a adversarial algorithms 前提：the attacker has access to the user’s password, but needs to overcome a keystroke dynamics based authentication layer related workbehavioral biometrics hand-writing, typing, mouse movements, touchscreen swipes, gait analysis ExperimentsExperimental SetupProtocolsfor collecting new data, and selecting new samples for training and testing collectign MTurk dataset pre-processing: drop any malformed samples(due to a combination of reasons that include: different behavior of browsers, differences in internet speed, or other noise as the subjects took the study simultaneously) describe the protocol for selecting samples for training and testing, and creating adversarial samples across all datasets. 生物行为学有两种分类器：一类分类器和两类分类器。前者只用正确样本，后者还会用到假样本。一般用一类分类器：1. because it is very impractical to expect negative samples for an arbitrary password.2. both the two class classifiers, and one class classifiers appear to give similar EER scores Genuine User Samples真实样本use the first half of the samples for training, the second half of the samples for testing imposter training samples虚假训练样本随机选择，与真实样本同数量 imposter testing samples虚假测试样本DSN: first four samples of every user besides the genuine userMYurk and touchscreen swipes dataset: randomly sampled the same number of impostor samples as the genuine user’s test samples adversary对抗样本The Targeted K-means++ adversary used all the samples from the data set excluding the ones from the target user and the ones used for training and testing the user’s classifier. For the Indiscriminate K-means++ adversary, we conducted a new MTurk study, as described before, a few months after the original study. We used all the samples from this new study. In Algorithm 2, we set the parameter “SAMPLE-SIZE” to 20000. Detection Algorithms 检测算法One class classifiers Manhattan distance$$ \sum_{i=1}^m\frac{\left|{x_i-y_i}\right|}m $$ Gaussian高斯training samples are modeled as a Gaussian distribution based on their mean and standard deviation Gaussian mixture高斯混合模型 https://blog.csdn.net/jinping_shi/article/details/59613054 高斯混合模型（Gaussian Mixed Model）指的是多个高斯分布函数的线性组合，理论上GMM可以拟合出任意类型的分布，通常用于解决同一集合下的数据包含多个不同的分布的情况（或者是同一类分布但参数不一样，或者是不同类型的分布，比如正态分布和伯努利分布）。$$ \sum_{k=1}^Kπ_kN\left(x|μ_k,\sum_k\right) $$$$ \sum_{k=1}^Kπ_k=1 $$$$ 0 ≤ Kπ_k ≤ 1 $$即$π_k$相当于每个分量的权重GMM常用于聚类。如果要从 GMM 的分布中随机地取一个点的话，实际上可以分为两步：首先随机地在这 K 个 Component 之中选一个，每个 Component 被选中的概率实际上就是它的系数πkπk \pi_k ，选中 Component 之后，再单独地考虑从这个 Component 的分布中选取一个点就可以了──这里已经回到了普通的 Gaussian 分布，转化为已知的问题。将GMM用于聚类时，假设数据服从混合高斯分布（Mixture Gaussian Distribution），那么只要根据数据推出 GMM 的概率分布来就可以了；然后 GMM 的 K 个 Component 实际上对应KKK个 cluster 。根据数据来推算概率密度通常被称作 density estimation 。 one class SVMused the Support Vector Machine(SVM) implementation in sklearn, with radial basis function (RBF) kernel, and kernel parameter 0.9. Autoencoder and Contractive Autoencoder自动编码和收缩性自动编码With the advent of deep learning, researchers have started using variants of neural networks in the domain of cybersecurity. One of the key structures used in the past are autoencoders and contractive autoencoders随着深度学习的到来，研究人员开始在网络安全领域使用神经网络的变体。过去使用的关键结构之一是自动编码器和压缩自动编码器 Two class classifiers Random Forestused a model similar to the one described by Antal et al [4]. Random Forests with 100 trees was their best-performing classifier on the touchscreen swipes dataset. We used the Random Forest implementation in sklearn我们使用了一个类似于Antal et al[4]所描述的模型。随机森林与100棵树是他们在触摸屏滑动数据集上表现最好的分类器。我们在sklearn中使用了Random Forest实现 Nearest NeighborHere we classify a test sample based on the majority label among a fixed number of its nearest neighbors in the training set. The neighbours are determined using Euclidean distance. We used the implementation in [32]在测试样本中用最近邻 Fully Connected Neural Net全连接NNWe experimented with multiple variants of multi layer perceptron by using different hyper parameters. The network that performed the best had two hidden layers with 15 neurons each computing scores for genuine and impostor classes. There was no significant improvement in the performance of the network by increasing the number of layers or neurons per layer in the architecture of the neural network.我们使用不同的超参数对多层感知器的多个变体进行了实验。表现最好的网络有两个隐藏层，每个层有15个神经元，计算真实和冒名顶替类的分数。在神经网络体系结构中，每层增加层数或神经元数量，网络性能没有显著改善。 Monaco’s Normalization Technique 标准化The key insight of this technique was that a user’s classifier could normalize future input samples based only on the genuine user’s data given to it at the start. Essentially, this acts like a filtering step - and features that are too far from the mean of the genuine user’s fitting data get filtered out.后续样本基于刚开始给定的真实输入样本来做标准化这个标准化很重要，没这个就无法得出结果we do not even mention our results without thisnormalization. ResultsEqual error rate Name of Classifier DSN EER MTurk EER Manhattan 0.091 0.097 SVM 0.087 0.097 Gaussian 0.121 0.109 Gaussian Mixture 0.137 0.135 … … … (具体见表2) 注：没有标准化的EER都在0.15左右 Keystroke ResultsIn this section we discuss the results of testing our adversaries on the DSN and MTurk datasets, which are summarized in Tables III, IV. We conducted the tests independently on each of the five passwords in the MTurk dataset, but for a more compact presentation, we average the results of all passwords. A few interesting highlights based on these results are given below在本节中,我们讨论的结果,测试DSN和MTurk数据集,总结在表III、IV。我们进行独立测试在MTurk数据集中的密码。为了更紧凑的表示,我们把所有的结果平均之后显示出来。 MasterKey VS K-means++K-means++ performs better than MasterKey.Figure 2 展示了最好的一类分类器和二类分类器下，Target K-means++和Indiscriminate K-means++以及MasterKey的性能对比Targeted K-means++ seems to essentially be ableto compromise the security of all the users in the limit. Table3展示了K-means++强于asterKey 本文中用到的样本量更大，选择train sample和test sample的protocol也不一样，但是EER与原文差不多。如图5所示。 As can be seen by Table V, and Figure 4, the results on this dataset show the same trends as seen in the keystroke dynamics datasets before. The first try which hits the mean of the impostor samples is not very successful here. This is particularly bad for an adversary like MasterKey which stays around the mean of the distribution, and is reflected in the results in Table V. But the K-means++ adversary is quickly able to explore the sample space to find more challenging queries and in 10 tries itself, breaks into a sizeable proportion of the classifiers as in the keystrokes dataset. And in the limit, essentially all the user’s classifiers are compromised.由表V和图4可以看出，该数据集上的结果显示了与之前击键动力学数据集相同的趋势。第一次尝试就击中了冒名顶替样本的均值，但并不是很成功。这是特别糟糕的敌人像万能钥匙保持周围分布的均值,并反映在结果表诉。但k - means + +对手很快就能够探索样本空间中找到更有挑战性的查询和10次尝试本身,闯进了一相当大的比例的数据集分类器的按键。在极限情况下，基本上所有用户的分类器都被破坏了。 Conclusion and future workBehavioral biometrics is a promising field of research, but it is not a reliable solution for authentication in its current state. 行为生物识别技术是一个很有前途的研究领域，但在目前的状态下，它并不是一个可靠的认证解决方案。We proposed two adversarial agents that require a different amount of effort from the adversary. Both attack methods performed clearly better than the previously studied attack methods in the literature and show that current state of the art classifiers add little protection against such adversaries. In the case of Indiscriminate K-means++, more than its success rate, it is worrying for the keystroke dynamics systems that such an adversary could conduct its attack without any additional cost incurred to collect samples. Past research has focused much more on improving the classifiers against naive adversaries, but this work shows that a lot more research from the adversarialperspective is required before such authentication systems can be adopted in sensitive contexts.The design of our K-means++ adversaries utilizes a common intuition about human behavior, which is that a person’s behavioral data belongs to a “cluster”, rather than being absolutely unique. Thus it is natural to expect such techniques to generalize to other types of behavioral data. The results on the touchscreen touchscreen swipes dataset also supports this claim.我们提出了两种敌对代理人，它们需要不同于对手的努力。这两种攻击方法的性能明显优于文献中先前研究的攻击方法，表明当前的艺术分类器对这类敌人的保护很少。在不加区别的K-means++的情况下，对于击键动力学系统来说，这样的对手可以进行攻击而不需要额外的成本来收集样本，这比其成功率更令人担忧。过去的研究更多地关注于改进针对天真的对手的分类器，但这项工作表明，在这种身份验证系统可以在敏感的上下文中采用之前，需要从adversarialperspective的角度进行更多的研究。我们的k -means++敌人的设计利用了一种关于人类行为的共同直觉，即一个人的行为数据属于一个“集群”，而不是绝对独一无二的。因此，很自然地期望这些技术可以推广到其他类型的行为数据。触屏触摸屏上的结果也支持这一说法。Of course, from a practical perspective, it is much harder to simulate an attack on a touchscreen based system, as opposed to a keystroke dynamics system, because of the diversity of the touchscreen features like pressure, finger size and so on. Unlike keystrokes - we can’t just write an easily automated script to carry out such an attack. This implies that a swipes based classifier is more secure for now. But given enough motivation, it is possible that methods could be devised to bypass such limitations. For instance, such attacks could be carried out by feeding false information to the android sensors, or in an extreme example, by building a robotic arm.当然，从实际角度来看，由于触摸屏的压力、手指大小等特性的多样性，模拟攻击基于触摸屏的系统要比模拟击键动力学系统困难得多。与击键不同的是，我们不能仅仅编写一个易于自动化的脚本来执行这样的攻击。这意味着基于滑动的分类器现在更安全。但只要有足够的动力，就有可能设计出绕过这些限制的方法。例如，这种攻击可以通过向android传感器提供虚假信息来实施，或者在一个极端的例子中，通过制造机械手臂来实施。Previous research has relied exclusively on the average Equal Error Rate scores across all subjects to measure the robustness of classifiers. To develop more robust behavioral biometric classifiers, it would be useful to benchmark against the adversarial agents proposed in this paper instead. For instance, one class classifiers have been the dominant method researched in the keystroke dynamics literature as they perform as well as the two class classifiers in terms of EER, while the two class classifiers are not practical because one can not expect impostor samples for arbitrary passwords. Yet, against both the adversarial algorithms, the two class classifiers performed clearly better than the one class classifiers. This suggests that a future direction of research would be to bridge the gap between the idealized and practical versions of such two class classifiers as explained in section IV A.以往的研究完全依赖于所有科目的平均等错误率分数来衡量分类器的鲁棒性。为了开发出更健壮的行为生物特征分类器，我们将对本文提出的抗辩剂进行基准测试。例如，在击键力学文献中，一类分类器是主要的研究方法，因为它们的性能和EER的两个类分类器一样好，而这两个类分类器是不实用的，因为人们不能指望冒名顶替者样本来处理任意的密码。然而，与两种对抗性算法相比，这两个类分类器的性能明显优于一个类分类器。这表明，今后的研究方向将是弥补第四节a所解释的这两类分类器的理想化版本和实际版本之间的差距。From the adversarial perspective, one possibility for future work would be to extend these methods to free text based classifiers. Free text classifiers utilize a continuous stream of input text, as opposed to fixed text passwords, in order to classify keystroke patterns. This leads to differences in the features and algorithms that are utilized for these classifiers. But conceptually, the Indiscriminate K-means++ adversary should be well suited to generate adversarial samples against free text classifiers as well.从敌对的角度来看，未来工作的一种可能是将这些方法扩展到基于自由文本的分类器。自由文本分类器使用连续的输入文本流(与固定文本密码相反)来分类击键模式。这导致了这些分类器所使用的特性和算法的差异。但从概念上讲，不加区分的K-means++对手也应该非常适合针对自由文本分类器生成对抗性样本。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>WNSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kaggle相关]]></title>
    <url>%2F2019%2F03%2F14%2Fkaggle%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[如何在 Kaggle 首战中进入前 10%原文 流程Exploration Data Analysis(EDA)Visualizationmatplotlib + seaborn 查看目标变量的分布。当分布不平衡时，根据评分标准和具体模型的使用不同，可能会严重影响性能。 对 Numerical Variable，可以用 Box Plot 来直观地查看它的分布。 对于坐标类数据，可以用 Scatter Plot 来查看它们的分布趋势和是否有离群点的存在。 对于分类问题，将数据根据 Label 的不同着不同的颜色绘制出来，这对 Feature 的构造很有帮助。 绘制变量之间两两的分布和相关度图表。 example_visualization Statistical Tests可视化为定性，这里专注于定量，例如对于新创造的特征，可以将其加入原模型当中，看结果的变化。 在某些比赛中，由于数据分布比较奇葩或是噪声过强，Public LB(Leader board)的分数可能会跟 Local CV(Cross Validation)的结果相去甚远。可以根据一些统计测试的结果来粗略地建立一个阈值，用来衡量一次分数的提高究竟是实质的提高还是由于数据的随机性导致的。 Data Preprossing处理策略主要依赖于EDA中得到的结论。 有时数据会分散在几个不同的文件中，需要 Join 起来。 处理 Missing Data。 处理 Outlier。 必要时转换某些 Categorical Variable 的表示方式。例如应用one-hot encoding(pd.get_dummies)将categorical variable转化为数字变量。 有些 Float 变量可能是从未知的 Int 变量转换得到的，这个过程中发生精度损失会在数据中产生不必要的 Noise，即两个数值原本是相同的却在小数点后某一位开始有不同。这对 Model 可能会产生很负面的影响，需要设法去除或者减弱 Noise。 Feature EngineeringFeature Selection总的来说，应该生成尽量多的 Feature，相信 Model 能够挑出最有用的 Feature。但有时先做一遍 Feature Selection 也能带来一些好处： Feature 越少，训练越快。 有些 Feature 之间可能存在线性关系，影响 Model 的性能。 通过挑选出最重要的 Feature，可以将它们之间进行各种运算和操作的结果作为新的 Feature，可能带来意外的提高。 Feature Selection 最实用的方法也就是看 Random Forest 训练完以后得到的 Feature Importance 了。其他有一些更复杂的算法在理论上更加 Robust，但是缺乏实用高效的实现。从原理上来讲，增加 Random Forest 中树的数量可以在一定程度上加强其对于 Noisy Data 的 Robustness。 看 Feature Importance 对于某些数据经过脱敏处理的比赛尤其重要。这可以免得你浪费大把时间在琢磨一个不重要的变量的意义上。(脱敏：数据脱敏(Data Masking),又称数据漂白、数据去隐私化或数据变形。百度百科对数据脱敏的定义为：指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。) Feature Encoding假设有一个 Categorical Variable 一共有几万个取值可能，那么创建 Dummy Variables 的方法就不可行了。这时一个比较好的方法是根据 Feature Importance 或是这些取值本身在数据中的出现频率，为最重要（比如说前 95% 的 Importance）那些取值（有很大可能只有几个或是十几个）创建 Dummy Variables，而所有其他取值都归到一个“其他”类里面。 Model SelectionBase Model: SVM Linear Regression Logistic Regression Neural Networks Most Used Models: Gradient Boosting Random Forest Extra Randomized Trees XGBoost Model Training通过Grid Search来确定模型的最佳参数。e.g. sklearn 的 RandomForestClassifier 来说，比较重要的就是随机森林中树的数量 n_estimators 以及在训练每棵树时最多选择的特征数量 max_features。 Xgboost 的调参。通常认为对它性能影响较大的参数有： eta：每次迭代完成后更新权重时的步长。越小训练越慢。 num_round：总共迭代的次数。 subsample：训练每棵树时用来训练的数据占全部的比例。用于防止 Overfitting。 colsample_bytree：训练每棵树时用来训练的特征的比例，类似 RandomForestClassifier 的 max_features。 max_depth：每棵树的最大深度限制。与 Random Forest 不同，Gradient Boosting 如果不对深度加以限制，最终是会 Overfit 的。 early_stopping_rounds：用于控制在 Out Of Sample 的验证集上连续多少个迭代的分数都没有提高后就提前终止训练。用于防止 Overfitting。 一般的调参步骤是： 将训练数据的一部分划出来作为验证集。 先将 eta 设得比较高（比如 0.1），num_round 设为 300 ~ 500。 用 Grid Search 对其他参数进行搜索。 逐步将 eta 降低，找到最佳值。 以验证集为 watchlist，用找到的最佳参数组合重新在训练集上训练。注意观察算法的输出，看每次迭代后在验证集上分数的变化情况，从而得到最佳的 early_stopping_rounds。 所有具有随机性的 Model 一般都会有一个 seed 或是 random_state 参数用于控制随机种子。得到一个好的 Model 后，在记录参数时务必也记录下这个值，从而能够在之后重现 Model。 Cross Validation一般5-fold。 fold越多训练越慢。 Ensemble Generation常见的 Ensemble 方法有这么几种： Bagging：使用训练数据的不同随机子集来训练每个 Base Model，最后进行每个 Base Model 权重相同的 Vote。也即 Random Forest 的原理。 Boosting：迭代地训练 Base Model，每次根据上一个迭代中预测错误的情况修改训练样本的权重。也即 Gradient Boosting 的原理。比 Bagging 效果好，但更容易 Overfit。 Blending：用不相交的数据训练不同的 Base Model，将它们的输出取（加权）平均。实现简单，但对训练数据利用少了。 Stacking：接下来会详细介绍。 从理论上讲，Ensemble 要成功，有两个要素： Base Model 之间的相关性要尽可能的小。这就是为什么非 Tree-based Model 往往表现不是最好但还是要将它们包括在 Ensemble 里面的原因。Ensemble 的 Diversity 越大，最终 Model 的 Bias 就越低。 Base Model 之间的性能表现不能差距太大。这其实是一个 Trade-off，在实际中很有可能表现相近的 Model 只有寥寥几个而且它们之间相关性还不低。但是实践告诉我们即使在这种情况下 Ensemble 还是能大幅提高成绩。 Pipelineworkflow比较复杂，因此一个高自动化的pipeline比较重要。 这里是以一个例子：example]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>Kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Naive Bayes及其sklearn实现]]></title>
    <url>%2F2019%2F03%2F14%2FNaive%20Bayes%2F</url>
    <content type="text"><![CDATA[P(B|A) = P(A|B)*P(B)/P(A) 朴素：特征之间相互独立 算法流程 x = {a1, a2, …, am}为待分类项，a是特征。 类别集合C = {y1, …, yn}. 计算P(y1|x), P(y2|x) … P(yk|x) = max{P(yi|x)}，则x属于yk类 总结：某类在待分类项出现的条件下的概率是所有类中最大的，这个分类项就属于这一类。 e.g.判断一个黑人来自哪个洲，求取每个洲黑人的比率，非洲最高，选非洲。 其中x = {a1, a2, …, am}，即P(C|a1,a2…) = P(C)*P(a1,a2,…|C)/P(a1,a2…)。posterior = prior * likelihood / evidence, 这里evidence是常数，不影响。 —–&gt;求解P(C) * P(a1,a2,a3…|C) —–&gt;链式法则：P(C) * P(a2,a3…|C, a1) * P(a1|C) —&gt; … —&gt; P(C) * P(a1|C) * P(a2|C, a1) * P(a3|C, a1, a2)…由于特征之间的相互独立性，a2发生于a1无关，转化为 —&gt; P(C) * P(a1|C) * P(a2|C) … * P(am|C) —–&gt;问题转化为求取条件概率： 找到一个已知分类的待分类项集合，这个集合叫做训练样本集。 统计得到在各类别下各个特征属性的条件概率估计。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>Classification</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LightGBM]]></title>
    <url>%2F2019%2F03%2F14%2FLightGBM%2F</url>
    <content type="text"><![CDATA[特性 可以接受categorical features：LightGBM 可以直接使用 categorical features（分类特征）作为 input（输入）. 它不需要被转换成 one-hot coding（独热编码）, 并且它比 one-hot coding（独热编码）更快（约快上 8 倍）。注意: 在你构造 Dataset 之前, 你应该将分类特征转换为 int 类型的值. 原理]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>DOC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GBDT & XGBoost]]></title>
    <url>%2F2019%2F03%2F14%2FGBDT%20%26%20XGBoost%2F</url>
    <content type="text"><![CDATA[DocSlides 为何要推导出目标函数而不是直接增加树 理论上：搞清楚learning的目的，以及其收敛性。 工程上： gi和hi是对loss function的一次、二次导 目标函数以及整个学习过程只依赖于gi和hi 可以根据实际问题，自定义loss function Summary 原理损失函数$$ \text{obj} = \sum_{i=1}^n l(y_i, \hat{y}i^{(t)}) + \sum{i=1}^t\Omega(f_i)$$l为loss，\ \Omega \ 为正则项 loss：采用加法策略，第t颗树时：$$ \hat{y}_i^{(0)} = 0 $$$$ \hat{y}_i^{(1)} = f_1(x_i) = \hat{y}_i^{(0)} + f_1(x_i) $$$$ \hat{y}_i^{(2)} = f_1(x_i) + f_2(x_i)= \hat{y}_i^{(1)} + f_2(x_i) $$$$ \dots $$$$ \hat{y}i^{(t)} = \sum{k=1}^t f_k(x_i)= \hat{y}_i^{(t-1)} + f_t(x_i) $$在添加第t颗树时，需要优化的目标函数为：$$ \sum_{i=1}^n [g_i f_t(x_i) + \frac{1}{2} h_i f_t^2(x_i)] + \Omega(f_t) $$其中h和f：$$ g_i = \partial_{\hat{y}_i^{(t-1)}} l(y_i, \hat{y}_i^{(t-1)}) $$$$ h_i = \partial_{\hat{y}_i^{(t-1)}}^2 l(y_i, \hat{y}_i^{(t-1)}) $$note: 是对谁的导 正则项：复杂度：$$ \Omega(f) = \gamma T + \frac{1}{2}\lambda \sum_{j=1}^T w_j^2 $$其中w是叶子上的score vector，T是叶子数量 DART Booster为了解决过拟合，会随机drop trees: 训练速度可能慢于gbtree 由于随机性，早停可能不稳定 特性Monotonic Constraints单调性限制 一个可选特性:会限制模型的结果按照某个特征 单调的进行增减 也就是说可以降低模型对数据的敏感度，如果明确已知某个特征与预测结果呈单调关系时，那在生成模型的时候就会跟特征数据的单调性有关。 Feature Interaction Constraints单调性限制 一个可选特性：不用时，在tree生成的时候，一棵树上的节点会无限制地选用多个特征 设置此特性时，可以规定，哪些特征可以有interaction（一般独立变量之间可以interaction，非独立变量的话可能会引入噪声） 好处： 预测时更小的噪声 对模型更好地控制 Instance Weight File 规定了模型训练时data中每一条instance的权重 有些instance质量较差，或与前一示例相比变化不大，所以可以调节其所占权重 调参Overfitting与overfitting有关的参数： 直接控制模型复杂度：max_depth, min_child_weight and gamma. 增加模型随机性以使得模型对噪声有更强的鲁棒性： subsample and colsample_bytree. Reduce stepsize eta. Remember to increase num_round when you do so. Imbalanced Dataset 只关注测量指标的大小 平衡数据集 via scale_pos_weight 使用AUC作为metric 关注预测正确的概率 此时不能re-balance数据集 Set parameter max_delta_step to a finite number (say 1) to help convergence]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>DOC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Decisiong Tree:ID3 C4.5 CART]]></title>
    <url>%2F2019%2F03%2F14%2FDecision%20Tree%2F</url>
    <content type="text"><![CDATA[决策树问题：如何挑选用于分裂节点的特征–&gt;ID3 C4.5 …(一个标准：使分裂出来的节点尽可能纯，即一个分支尽可能属于同类) ID3信息增益 信息增益 = 信息熵 - 条件熵 信息增益：针对每个 属性 信息熵：整个样本空间的不确定度。其中Pk一定是label取值的概率。 条件熵：给定某个属性，求其信息熵 –&gt; 问题：某属性所包括的类别越多，信息增益越大。极限：每个类别仅有1个实例（label数量为1），log p = log1 = 0， 所以最终条件熵=0。或：属性类别越多，条件熵越小，其纯度越高。 –&gt; 信息增益准则其实是对可取值数目较多的属性有所偏好！ –&gt; 泛化能力不强 C4.5 信息增益率+信息增益 属性a的信息增益率 = 属性a的信息增益 / a的某个固有统计量IV(a) V为a的取值数目。 （实际上是属性a的信息熵） 直接使用信息增益率：偏好取值数目小的属性。 先选择高于平均水平信息增益的属性，再选择最高信息增益率的属性。 CART 基尼系数+MAE/MSE 与ID3、C4.5的不同：形成二叉树，因此 –&gt; 既要确定要分割的属性，也要确定要分割的值 回归树：MAE/MSE example(MSE)： 考虑数据集 D 上的所有特征 j，遍历每一个特征下所有可能的取值或者切分点 s，将数据集 D 划分成两部分 D1 和 D2 分别计算上述两个子集的平方误差和，选择最小的平方误差对应的特征与分割点，生成两个子节点。 对上述两个子节点递归调用步骤1 2,直到满足停止条件。 分类树：(Gini) 基尼系数越小，纯度越高 对每个特征 A，对它的所有可能取值 a，将数据集分为 A＝a，和 A!＝a 两个子集，计算集合 D 的基尼指数：Gini(A) = D1/D Gini(D1) + D2/D Gini(D2) 遍历所有的特征 A，计算其所有可能取值 a 的基尼指数，选择 D 的基尼指数最小值对应的特征及切分点作为最优的划分，将数据分为两个子集。 对上述两个子节点递归调用步骤1 2, 直到满足停止条件。 生成 CART 决策树。 停止条件有： 1. 节点中的样本个数小于预定阈值; 2. 样本集的Gini系数小于预定阈值（此时样本基本属于同一类）; 3. 没有更多特征。 剪枝 例子：example 控制决策树过拟合的方法 剪枝 控制终止条件，避免树形结构过细 构建随机森林]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DS Competition_Coursera#1]]></title>
    <url>%2F2019%2F03%2F14%2FD%20S%20competition_Coursera%231%2F</url>
    <content type="text"><![CDATA[RecapLinear model非常适合于高维稀疏数据e.g.SVM, Logistic SVM也是非线性 Tree-basedDecision Tree, Random Forest, GBDT]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DBSCAN以及sklearn实现DBSCAN]]></title>
    <url>%2F2019%2F03%2F14%2FDBSCAN%2F</url>
    <content type="text"><![CDATA[原文1原文2DBSCAN(Density-Based Spatial Clustering of Applications with Noise，具有噪声的基于密度的聚类方法)是一种很典型的密度聚类算法，和K-Means，BIRCH这些一般只适用于凸样本集的聚类相比，DBSCAN既可以适用于凸样本集，也可以适用于非凸样本集。 密度聚类其原理为：同一类别的样本，其样本分布一定是紧密的；可以将各组紧密相连的样本划分为不同的类别来得到聚类类别结果。 DBSCAN关键概念参数(ϵ, MinPts)描述领域的样本分布紧密程度，其中ϵ描述了某一样本的领域距离阈值，MinPts描述某一样本的距离为ϵ的领域中样本个数的阈值。 假设样本集是D=(x1,x2,…,xm),则DBSCAN具体的密度描述定义如下： ϵ-邻域：对于xj∈D，其ϵ-邻域包含样本集D中与xj的距离不大于ϵ的子样本集，即Nϵ(xj)={xi∈D|distance(xi,xj)≤ϵ}, 这个子样本集的个数记为|Nϵ(xj)| 核心对象：对于任一样本xj∈D，如果其ϵ-邻域对应的Nϵ(xj)至少包含MinPts个样本，即如果|Nϵ(xj)|≥MinPts，则xj是核心对象。 密度直达：如果xi位于xj的ϵ-邻域中，且xj是核心对象，则称xi由xj密度直达。 密度可达：对于xi和xj,如果存在样本样本序列p1,p2,…,pT,满足p1=xi,pT=xj, 且pt+1由pt密度直达，则称xj由xi密度可达。也就是说，密度可达满足传递性。此时序列中的传递样本p1,p2,…,pT−1均为核心对象，因为只有核心对象才能使其他样本密度直达。 密度相连：对于xi和xj,如果存在核心对象样本xk，使xi和xj均由xk密度可达，则称xi和xj密度相连。注意密度相连关系是满足对称性的。 图中MinPts = 5。红点为核心对象。 聚类思想由密度可达关系导出的最大密度相连的样本集合，即为最终聚类的一个类别。 方法：任意选择一个没有类别的核心对象作为种子，然后找到该核心对象密度可达的样本集合，为一个聚类。接着选择另一个没有类比的核心对象…直到所有核心对象都有类别。 问题： outlier.不在任何一个核心对象周围的点定义为异常样本点或噪声点，不考虑。 距离。少量样本而言，搜索周围样本一般用最近邻的方法；大量样本，可以用KD树，球树等搜索最近邻。 若某样本到两个核心对象的距离都小于ϵ，但这两个核心对象不可达，此时采取先来后到原则，标记其为先聚类的cluster类别。 算法输入：样本集D=(x1,x2,…,xm)，邻域参数(ϵ,MinPts), 样本距离度量方式 输出： 簇划分C. 初始化核心对象集合Ω=∅, 初始化聚类簇数k=0，初始化未访问样本集合Γ = D, 簇划分C = ∅ 对于j=1,2,…m, 按下面的步骤找出所有的核心对象： 通过距离度量方式，找到样本xj的ϵ-邻域子样本集Nϵ(xj) 如果子样本集样本个数满足|Nϵ(xj)|≥MinPts， 将样本xj加入核心对象样本集合：Ω=Ω∪{xj} 如果核心对象集合Ω=∅，则算法结束，否则转入步骤4. 在核心对象集合Ω中，随机选择一个核心对象o，初始化当前簇核心对象队列Ωcur={o}, 初始化类别序号k=k+1，初始化当前簇样本集合Ck={o}, 更新未访问样本集合Γ=Γ−{o} 如果当前簇核心对象队列Ωcur=∅，则当前聚类簇Ck生成完毕, 更新簇划分C={C1,C2,…,Ck}, 更新核心对象集合Ω=Ω−Ck， 转入步骤3。 在当前簇核心对象队列Ωcur中取出一个核心对象o′,通过邻域距离阈值ϵ找出所有的ϵ-邻域子样本集Nϵ(o′)，令Δ=Nϵ(o′)∩Γ, 更新当前簇样本集合Ck=Ck∪Δ, 更新未访问样本集合Γ=Γ−Δ, 更新Ωcur=Ωcur∪(Δ∩Ω)−o′，转入步骤5. 输出结果为： 簇划分C={C1,C2,…,Ck} 对比对比图：一般用于数据集稠密时的情况，或数据集是非凸的。 DBSCAN的主要优点有： 可以对任意形状的稠密数据集进行聚类，相对的，K-Means之类的聚类算法一般只适用于凸数据集。 可以在聚类的同时发现异常点，对数据集中的异常点不敏感。 聚类结果没有偏倚，相对的，K-Means之类的聚类算法初始值对聚类结果有很大影响。 DBSCAN的主要缺点有： 如果样本集的密度不均匀、聚类间距差相差很大时，聚类质量较差，这时用DBSCAN聚类一般不适合。 如果样本集较大时，聚类收敛时间较长，此时可以对搜索最近邻时建立的KD树或者球树进行规模限制来改进。 调参相对于传统的K-Means之类的聚类算法稍复杂，主要需要对距离阈值ϵ，邻域样本数阈值MinPts联合调参，不同的参数组合对最后的聚类效果有较大影响。 sklearn.cluster.DBSCAN参数按其算法，包括DBSCAN本身的参数，以及求取最近邻时的参数。 eps：DBSCAN算法参数，ϵ-邻域的距离阈值。默认值是0.5.eps过大，则更多的点会落在核心对象的ϵ-邻域，此时我们的类别数可能会减少， 本来不应该是一类的样本也会被划为一类。反之则类别数可能会增大，本来是一类的样本却被划分开。 min_samples：DBSCAN算法参数，上文的MinPts。默认值是5.通常和eps一起调参。在eps一定的情况下，min_samples过大，则核心对象会过少，此时簇内部分本来是一类的样本可能会被标为噪音点，类别数也会变多。反之min_samples过小的话，则会产生大量的核心对象，可能会导致类别数过少。 metric：最近邻距离度量参数。可以使用的距离度量较多，一般来说DBSCAN使用默认的欧式距离（即p=2的闵可夫斯基距离）就可以满足我们的需求。可以使用的距离度量参数有： 欧式距离 “euclidean” 曼哈顿距离 “manhattan” 切比雪夫距离“chebyshev” 闵可夫斯基距离 “minkowski” 带权重闵可夫斯基距离 “wminkowski” 标准化欧式距离 “seuclidean” 马氏距离“mahalanobis” algorithm：最近邻搜索算法参数，算法一共有三种，第一种是蛮力实现，第二种是KD树实现，第三种是球树实现。对于这个参数，一共有4种可选输入，‘brute’对应第一种蛮力实现，‘kd_tree’对应第二种KD树实现，‘ball_tree’对应第三种的球树实现，‘auto’则会在上面三种算法中做权衡，选择一个拟合最好的最优算法。需要注意的是，如果输入样本特征是稀疏的时候，无论我们选择哪种算法，最后scikit-learn都会去用蛮力实现‘brute’。个人的经验，一般情况使用默认的 ‘auto’就够了。 如果数据量很大或者特征也很多，用”auto”建树时间可能会很长，效率不高，建议选择KD树实现‘kd_tree’，此时如果发现‘kd_tree’速度比较慢或者已经知道样本分布不是很均匀时，可以尝试用‘ball_tree’。而如果输入样本是稀疏的，无论你选择哪个算法最后实际运行的都是‘brute’。 leaf_size：最近邻搜索算法参数，为使用KD树或者球树时， 停止建子树的叶子节点数量的阈值。这个值越小，则生成的KD树或者球树就越大，层数越深，建树时间越长，反之，则生成的KD树或者球树会小，层数较浅，建树时间较短。默认是30. 因为这个值一般只影响算法的运行速度和使用内存大小，因此一般情况下可以不管它。 p: 最近邻距离度量参数。只用于闵可夫斯基距离和带权重闵可夫斯基距离中p值的选择，p=1为曼哈顿距离， p=2为欧式距离。如果使用默认的欧式距离不需要管这个参数。 n_jobs ：使用CPU格式，-1代表全开。 输出： core_sample_indices_:核心样本指数。（此参数在代码中有详细的解释） labels_:数据集中每个点的集合标签给,噪声点标签为-1。 components_ ：核心样本的副本 主要是eps和min_samples的调参。 代码实例原文2中有。原文2]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>Clustering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CNN]]></title>
    <url>%2F2019%2F03%2F14%2FCNN%2F</url>
    <content type="text"><![CDATA[原贴 卷积神经网络卷积神经网络大致就是covolutional layer, pooling layer, ReLu layer, fully-connected layer的组合，例如下图所示的结构。 图片的识别 生物所看到的景象并非世界的原貌，而是长期进化出来的适合自己生存环境的一种感知方式 画面识别实际上是寻找/学习动物的视觉关联形式（即将能量与视觉关联在一起的方式） 画面的识别取决于： 图片本身 被如何观察 图像不变性： rotation viewpoint size illumination …前馈的不足 当出现上述variance时，前馈无法做到适应，即前馈只能对同样的内容进行识别，若出现其他情况时，只能增加样本重新训练 解决方法可以是让图片中不同的位置有相同的权重——共享权重CNN局部连接 空间共享（引入的先验知识） 局部连接（得到的下一层节点与该层并非全连接） depth上是全连接的 每个filter会在width维, height维上，以局部连接和空间共享，并贯串整个depth维的方式得到一个Feature Map。 示例 在输入depth为1时：被filter size为2x2所圈中的4个输入节点连接到1个输出节点上。 在输入depth为3时：被filter size为2x2，但是贯串3个channels后，所圈中的12个输入节点连接到1个输出节点上。 在输入depth为n时：2x2xn个输入节点连接到1个输出节点上。 三个channels的权重并不共享。 即当深度变为3后，权重也跟着扩增到了三组。 zero padding有时为了保证feature map与输入层保持同样大小，会添加zero padding，一般3*3的卷积核padding为1，5*5为2 Feature Map的尺寸等于(input_size + 2 *padding_size − filter_size)/stride+1 形状、概念抓取 卷积层可以对基础形状（包括边缘、棱角、模糊等）、对比度、颜色等概念进行抓取 可以通过多层卷积实现对一个较大区域的抓取 抓取的特征取决于卷积核的权重，而此权重由网络根据数据学习得到，即CNN会自己学习以什么样的方式观察图片 可以有多个filter，从而可以学习到多种特征 此时卷积层的输出depth也就不是1了 卷积层的输入输出均为长方体：其中depth与filters个数相同非线性（以ReLu为例）增强模型的非线性拟合能力pooling比如以步长为2，2x2的 filter pool pooling的主要功能是downsamping，有助减少conv过程中的冗余全连接 当抓取到足以用来识别图片的特征后，接下来的就是如何进行分类。 全连接层（也叫前馈层）就可以用来将最后的输出映射到线性可分的空间。 通常卷积网络的最后会将末端得到的长方体平摊(flatten)成一个长长的向量，并送入全连接层配合输出层进行分类。一些变体中用到的技巧 1x1卷积核：选择不同的个数，用来降维或升维 残差 所有的这些技巧都是对各种不变性的满足]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS231n-imgClassification]]></title>
    <url>%2F2019%2F03%2F14%2FCS231n-img_classification%2F</url>
    <content type="text"><![CDATA[kNNs 没有参数需要训练 只计算与训练样本之间的距离 Linear Classfication 可以将其理解为模板匹配，即最终的权重矩阵W的每一行为所学习得到的类别的模板，将其与test img做点积即做一次模板匹配。每个点积的值即为该分类所得的分数。 将权重矩阵的每一行重组后可以得到其信息，可以看出类似于某一类的模板： 可以看出当同一个类别有很多图片时，得到的模板是这些图片的平均。也暴露了它不适合用于多变性复杂的分类。]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>CS231n</tag>
        <tag>kNN</tag>
        <tag>SVM</tag>
        <tag>imgClassification</tag>
      </tags>
  </entry>
</search>
